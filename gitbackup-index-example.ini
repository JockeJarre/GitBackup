[GitBackup]
# Source directory to backup
RootDir=C:\Source\Directory

# Backup destination directory
BackupDir=C:\Backup\Directory

# Backup method selection (NEW FEATURE):
# - "bare" = Bare repository (default, fastest, most efficient storage)
#   Creates only .git structure, no working files. Best for most backup scenarios.
#   Pro: Fastest, minimal disk usage, direct git object storage
#   Con: No working directory for direct file access
#
# - "standard" = Standard git repository with working directory
#   Creates full repository with actual files and .git folder.
#   Pro: Files accessible directly, familiar git structure
#   Con: Slower due to file copying, more disk usage (2x files)
#
# - "index" = Git index approach (experimental, mimics original gitbackup.cmd)
#   Similar to bare but uses git index operations directly on source files.
#   Pro: No file copying like original cmd script, efficient git operations
#   Con: Experimental, more complex git operations
BackupMethod=index

# File size filtering (optional)
# Maximum file size to include (supports units: B, KB, MB, GB, TB)
MaxFileSizeBytes=100MB

# Minimum file size to include (supports units: B, KB, MB, GB, TB)
MinFileSizeBytes=1KB

# Exclude binary files (text files only)
# Uses sophisticated detection: null bytes, control character ratios, encoding analysis
ExcludeBinaryFiles=true

# Exclusion patterns (gitignore-style, supports multi-line format)
Exclude=*.tmp
    *.log
    **/.git/
    **/node_modules/
    **/bin/
    **/obj/
    *.dll
    *.exe
    !important.txt

# Git user information for commits
GitUserName=GitBackup
GitUserEmail=gitbackup@localhost

# Output options
Verbose=true

# PERFORMANCE COMPARISON:
# Method     | Speed | Disk Usage | Working Files | Use Case
# ---------- | ----- | ---------- | ------------- | --------
# bare       | Fast  | Minimal    | No           | Regular backups, automated tasks
# standard   | Slow  | 2x         | Yes          | Manual inspection, development
# index      | Fast  | Minimal    | No           | Large repositories, efficiency focus
